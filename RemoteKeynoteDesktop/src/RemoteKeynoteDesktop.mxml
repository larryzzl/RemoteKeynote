<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1024" height="600" frameRate="60"
					   currentState="normal"
					   backgroundColor.fullscreen="0x000000"
					   backgroundColor.normal="0xffffff"
					   showStatusBar="false"
					   creationComplete="onAppReady(event)">
	<fx:Script>
		<![CDATA[
			import com.larryzzl.flex.remotekeynote.controller.ApplicationController;
			import com.larryzzl.flex.remotekeynote.controller.Logger;
			import com.larryzzl.flex.remotekeynote.events.ApplicationEvent;
			import com.larryzzl.flex.remotekeynote.events.EventCenter;
			import com.larryzzl.flex.remotekeynote.events.SlideEvent;
			import com.larryzzl.flex.remotekeynote.kre.Keynote;
			import com.larryzzl.flex.remotekeynote.kre.KeynoteEvent;
			import com.larryzzl.flex.remotekeynote.kre.KeynoteRenderEngine;
			import com.larryzzl.flex.remotekeynote.kre.KeynoteSlide;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.graphics.codec.PNGEncoder;
			
			private var appController:ApplicationController = ApplicationController.inst;
			[Bindable]
			private var logger:Logger = Logger.inst;
			private var eventCenter:EventCenter = EventCenter.inst;
			
			[Bindable]
			private var fakeSlideCount:int = 0;
			[Bindable]
			private var totalFakeCount:int = 10;
			
			private var uc:UIComponent;
			private var kre:KeynoteRenderEngine;
			private var keynote:Keynote;
			
			protected function onAppReady(event:FlexEvent):void
			{
				// set up connection
				eventCenter.addEventListener(ApplicationEvent.CLIENT_CONNECTED, onClientConnected, false, 0, true);
				eventCenter.addEventListener(ApplicationEvent.EXIT_APP, onExitApp, false, 0, true);
				eventCenter.dispatchEvent(new ApplicationEvent(ApplicationEvent.SETUP_CONNECTION));
				
				// slide controller
				eventCenter.addEventListener(SlideEvent.SLIDE_TO_NEXT, onNextSlide, false, 0, true);
				eventCenter.addEventListener(SlideEvent.SLIDE_TO_PREVIOUS, onPreviousSlide, false, 0, true);
				
				eventCenter.addEventListener(ApplicationEvent.MOVE_SLIDE, onMoveSlide, false, 0, true);
				eventCenter.addEventListener(ApplicationEvent.ZOOM_SLIDE, onZoomSlide, false, 0, true);
				eventCenter.addEventListener(ApplicationEvent.RESET_VISUAL_SLIDE, onResetVisualSlide, false, 0, true);
				
				// keynote container
				uc = new UIComponent;
				uc.percentHeight = 100;
				uc.percentWidth = 100;
				ca.addChild(uc);
			}
			
			protected function onClientConnected(event:Event):void
			{
				logger.fine("CLIENT CONNECTED");
			}
			
			protected function onExitApp(event:Event):void
			{
				this.exit();
			}
			
			protected function onSendFakeData(event:MouseEvent):void
			{
				var b:BitmapData = new BitmapData(fakeSlideContent.width, fakeSlideContent.height);
				b.draw(fakeSlideContent);
				var pngEncoder:PNGEncoder = new PNGEncoder;
				var imgByteArray:ByteArray = pngEncoder.encode(b);
				
				var e:SlideEvent = new SlideEvent(SlideEvent.SEND_SLIDE_CONTENT);
				e.slideIndex = fakeSlideCount;
				e.slideContent = imgByteArray;
				eventCenter.dispatchEvent(e);
				
				var e1:SlideEvent = new SlideEvent(SlideEvent.SEND_SLIDE_TEXT);
				e1.slideIndex = fakeSlideCount;
				e1.slideText = "Fake Text: " + fakeSlideCount;
				eventCenter.dispatchEvent(e1);
				
				fakeSlideCount++;
			}
			
			protected function onSendFakeInit(event:MouseEvent):void
			{
				var e:SlideEvent = new SlideEvent(SlideEvent.UPDATE_SLIDE_INFO);
				e.totalSlideNumber = totalFakeCount;
				eventCenter.dispatchEvent(e);
			}
			
			protected function onReset(event:MouseEvent):void
			{
				fakeSlideCount = 0;
				eventCenter.dispatchEvent(new SlideEvent(SlideEvent.RESET_SLIDE));
			}
			
			protected function loadKeynote():void
			{
				// for test only
				var url:String = "file:///D:/Personal/PersonalProject/GitHub/RemoteKeynote/RemoteKeynoteDesktop/bin-debug";
				keynote = new Keynote(url);
				keynote.addEventListener(KeynoteEvent.KEYNOTE_STATE_CHANGE, onKeynoteStateChange);
				
				uc.width = ca.width;
				uc.height = ca.height;
				kre = new KeynoteRenderEngine(keynote, uc);
				kre.start();
				
				return;
				var f:File = new File;
				f.addEventListener(Event.SELECT, onDirSelect, false, 0, true);
				f.browseForDirectory("Choose Keynote Directory");
			}
			
			protected function onLoadFakeKeynote(event:MouseEvent):void
			{
				if (cbAutoFullscreen.selected == true)
				{
					//width = Capabilities.screenResolutionX;
					//height = Capabilities.screenResolutionY;
					
					ca.percentWidth = 100;
					ca.percentHeight = 100;
					
					// fullscreen handler
					stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullscreenChange, false, 0, true);
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}
				else
				{
					loadKeynote();
				}
			}
			
			protected function onDirSelect(event:Event):void
			{
				var f:File = event.target as File;
				logger.fine("Open keynote @: " + f.url);
			}
			
			protected function onKeynoteStateChange(event:KeynoteEvent):void
			{
				logger.fine("onKeynoteStateChange: " + event.keynoteState);
				if (event.keynoteState == Keynote.KEYNOTE_STATE_READY)
				{

				}
			}
			
			protected function onNext():void
			{
				if (kre) kre.next();
			}
			
			protected function onPrevious():void
			{
				if (kre) kre.previous();
			}
			
			protected function onNextSlide(event:SlideEvent):void
			{
				if (kre) kre.next();
			}
			
			protected function onPreviousSlide(event:SlideEvent):void
			{
				if (kre) kre.previous();
			}
			
			protected function onFullscreenChange(event:FullScreenEvent):void
			{
				logger.fine("Fullscreen: " + event.fullScreen);
				if (event.fullScreen == true)
				{
					currentState = "fullscreen";
					loadKeynote();
					inputCapture.setFocus();
					inputCapture.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, 0, true);
				}
				else
				{
					onExitApp(null);
				}
			}
			
			protected function onKeyUp(event:KeyboardEvent):void
			{
				switch (event.keyCode)
				{
					case Keyboard.LEFT:
						onPrevious();
						break;
					
					case Keyboard.RIGHT:
						onNext();
						break;
				}
			}
			
			protected function onMoveSlide(event:ApplicationEvent):void
			{
				ca.x += event.xOffset;
				ca.y += event.yOffset;
			}
			
			protected function onZoomSlide(event:ApplicationEvent):void
			{
				ca.scaleX *= event.newScale;
				ca.scaleY *= event.newScale;
			}
			
			protected function onResetVisualSlide(event:ApplicationEvent):void
			{
				ca.scaleX = ca.scaleY = 1;
				ca.x = 0;
				ca.y = 0;
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="fullscreen"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Group excludeFrom="fullscreen">
		<s:List dataProvider="{logger.logs}" width="50%" height="50%"/>
		
		<s:BorderContainer id="fakeSlideContent" width="50%" height="50%" right="0" backgroundColor="0xff8000">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
			</s:layout>
			<s:Label id="lbCount" color="#FFFFFF" fontSize="36" text="{fakeSlideCount}"/>
		</s:BorderContainer>
		
		<s:Button x="531" y="322" width="113" height="72" label="Send Slide Init" click="onSendFakeInit(event)"/>
		<s:Button x="650" y="321" width="115" height="72" label="Send Fake Data" click="onSendFakeData(event)" enabled="{fakeSlideCount != totalFakeCount}"/>
		<s:Button x="773" y="321" width="73" height="72" label="Reset" click="onReset(event)"/>
		<s:Button x="854" y="321" width="106" height="72" label="Load Keynote" click="onLoadFakeKeynote(event)"/>
		<s:Button x="531" y="402" width="86" height="54" label="next" click="onNext()"/>
		<s:Button x="625" y="401" width="92" height="55" label="previous" click="onPrevious()"/>
		<s:CheckBox id="cbAutoFullscreen" x="531" y="464" label="Auto Fullscreen" selected="true"/>
	</s:Group>

	<s:SpriteVisualElement id="ca" width="50%" height="50%">
	</s:SpriteVisualElement>
	
	<s:TextInput includeIn="fullscreen" id="inputCapture" visible="false"/>
	
</s:WindowedApplication>
